# CircleCI configuration file
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.1
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  validate:
    docker:
     - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            echo "done"
            make install
            echo "done"
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            echo "done"
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            echo "done"
            make lint 
            echo "done"
  build_and_push:
    docker:
      - image: cimg/python:3.7.16
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: build-and-push-image
          command: |
            python3 -m venv venv
            . venv/bin/activate
            ./run_docker.sh
            ./upload_docker.sh
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install gzip
  #         command: |
  #           yum -y install tar gzip
  #     - run:
  #         name: Ensure cluster infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/kubernetes-cluster.yml \
  #             --stack-name "udapeople-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #     - destroy-environment:
  #           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy_app:
    docker:
      - image: cimg/python:3.7.16
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "default"
      - kubernetes/install
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: deploy_apps
          command: |
            aws eks update-kubeconfig --region us-east-1 --name mycluster
            echo 'done'
            ./run_kubernetes.sh
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
workflows:
  capstone:
    jobs:
      #- validate
      - build_and_push
      - deploy_app:
            requires: [build_and_push]